/*
 * Copyright MapStruct Authors.
 *
 * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
 */
package com.homegrown.tools.code.generator.struct.processor.demo.model;

import com.homegrown.tools.code.generator.struct.processor.demo.model.common.ModelElement;
import com.homegrown.tools.code.generator.struct.processor.demo.model.common.Type;
import com.homegrown.tools.code.generator.struct.processor.demo.utils.Strings;
import org.apache.commons.collections4.CollectionUtils;

import javax.lang.model.type.TypeKind;
import javax.lang.model.util.Elements;
import java.util.*;

/**
 * A type generated by MapStruct, e.g. representing a mapper type.
 *
 * @author youyu
 */
public abstract class GeneratedType extends ModelElement {

    private static final String JAVA_LANG_PACKAGE = "java.lang";

    protected abstract static class GeneratedTypeBuilder<T extends GeneratedTypeBuilder> {

        private T myself;

        protected Elements elementUtils;

        protected List<GeneratedMethod> methods;

        protected SortedSet<Type> extraImportedTypes;


        GeneratedTypeBuilder(Class<T> selfType) {
            myself = selfType.cast( this );
        }

        public T elementUtils(Elements elementUtils) {
            this.elementUtils = elementUtils;
            return myself;
        }

        public T methods(List<GeneratedMethod> methods){
            this.methods = methods;
            return myself;
        }

    }

    private final String packageName;
    private final String name;
    private final String superClassName;
    private final String interfacePackage;
    private final String interfaceName;

    private final List<GeneratedMethod> methods;
    private final List<Annotation> annotations;
    private final SortedSet<Type> extraImportedTypes;

    private final String type;

    private List<Field> fields;

    public String getPackageName() {
        return packageName;
    }

    public String getName() {
        return name;
    }

    public String getSuperClassName() {
        return superClassName;
    }

    public String getInterfacePackage() {
        return interfacePackage;
    }

    public String getInterfaceName() {
        return interfaceName;
    }

    public boolean hasPackageName() {
        return !Strings.isEmpty( packageName );
    }

    public String getType() {
        return type;
    }

    // CHECKSTYLE:OFF

    public GeneratedType(String packageName, String name, String superClassName, String interfacePackage,
                         String interfaceName, List<GeneratedMethod> methods, List<Annotation> annotations,
                         SortedSet<Type> extraImportedTypes, String type, List<Field> fields) {
        this.packageName = packageName;
        this.name = name;
        this.superClassName = superClassName;
        this.interfacePackage = interfacePackage;
        this.interfaceName = interfaceName;
        this.methods = methods;
        this.annotations = annotations;
        this.extraImportedTypes = extraImportedTypes;
        this.type = type;
        this.fields = fields;
    }


    // CHECKSTYLE:ON




    protected void addIfImportRequired(Collection<Type> collection, Type typeToAdd) {
        if ( typeToAdd == null ) {
            return;
        }

        if ( needsImportDeclaration( typeToAdd ) ) {
            collection.add( typeToAdd );
        }
    }

    private boolean needsImportDeclaration(Type typeToAdd) {
        if ( !typeToAdd.isToBeImported() ) {
            return false;
        }

        if ( typeToAdd.getTypeMirror().getKind() != TypeKind.DECLARED && !typeToAdd.isArrayType() ) {
            return false;
        }

        if ( typeToAdd.getPackageName() != null ) {
            if ( typeToAdd.getPackageName().equals( JAVA_LANG_PACKAGE ) ) {
                // only the types in the java.lang package are implicitly imported, the packages under java.lang
                // like java.lang.management are not.
                return false;
            }

            if ( typeToAdd.getPackageName().equals( packageName ) ) {
                if ( typeToAdd.getTypeElement() != null ) {
                    if ( !typeToAdd.getTypeElement().getNestingKind().isNested() ) {
                        return false;
                    }
                }
                else if ( typeToAdd.getComponentType() != null ) {
                    if ( !typeToAdd.getComponentType().getTypeElement().getNestingKind().isNested() ) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    @Override
    public Set<Type> getImportTypes() {
        SortedSet<Type> importedTypes = new TreeSet<>();

        if (CollectionUtils.isNotEmpty(methods)){
            for ( GeneratedMethod method : methods ) {
                for ( Type type : method.getImportTypes() ) {
                    addIfImportRequired( importedTypes, type );
                }
            }
        }

        if (CollectionUtils.isNotEmpty(fields)){
            for ( Field field : fields ) {
                if ( field.isTypeRequiresImport() ) {
                    for ( Type type : field.getImportTypes() ) {
                        addIfImportRequired( importedTypes, type );
                    }
                }
            }
        }

        if (CollectionUtils.isNotEmpty(annotations)){
            for ( Annotation annotation : annotations ) {
                addIfImportRequired( importedTypes, annotation.getType() );
            }
        }

        if (CollectionUtils.isNotEmpty(extraImportedTypes)){
            for ( Type extraImport : extraImportedTypes ) {
                addIfImportRequired( importedTypes, extraImport );
            }
        }

        return importedTypes;
    }

    public SortedSet<String> getImportTypeNames() {
        SortedSet<String> importTypeNames = new TreeSet<>();
        for ( Type type : getImportTypes() ) {
            importTypeNames.add( type.getImportName() );
        }
        return importTypeNames;
    }

    public List<Annotation> getAnnotations() {
        return annotations;
    }

    public List<GeneratedMethod> getMethods() {
        return methods;
    }

    public List<Field> getFields() {
        return fields;
    }

}
